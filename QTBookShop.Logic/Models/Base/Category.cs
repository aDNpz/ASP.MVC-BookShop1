//@GeneratedCode
namespace QTBookShop.Logic.Models.Base
{
    ///
    /// Generated by the generator
    ///
    public partial class Category
    {
        ///
        /// Generated by the generator
        ///
        static Category()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        ///
        /// Generated by the generator
        ///
        public Category()
        {
            Constructing();
            _source = new Entities.Base.Category();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        internal Category(Entities.Base.Category source)
        {
            Constructing();
            _source = source;
            Constructed();
        }
        
        new internal Entities.Base.Category Source
        {
            get => (Entities.Base.Category)(_source!);
            set => _source = value;
        }
        
        public System.String Name
        {
            get => Source.Name;
            set => Source.Name = value;
        }
        
        public System.String Description
        {
            get => Source.Description;
            set => Source.Description = value;
        }
        
        private CommonBase.Modules.Collection.DelegateList<QTBookShop.Logic.Entities.App.Book, QTBookShop.Logic.Models.App.Book>? _books;
        public System.Collections.Generic.IList<QTBookShop.Logic.Models.App.Book> Books
        {
            get => _books ??= new CommonBase.Modules.Collection.DelegateList<QTBookShop.Logic.Entities.App.Book, QTBookShop.Logic.Models.App.Book>(Source.Books, e => QTBookShop.Logic.Models.App.Book.Create(e));
        }
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(Entities.Base.Category other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                Name = other.Name;
                Description = other.Description;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(Entities.Base.Category other, ref bool handled);
        partial void AfterCopyProperties(Entities.Base.Category other);
        ///
        /// Generated by the generator
        ///
        public void CopyProperties(QTBookShop.Logic.Models.Base.Category other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                Name = other.Name;
                Description = other.Description;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QTBookShop.Logic.Models.Base.Category other, ref bool handled);
        partial void AfterCopyProperties(QTBookShop.Logic.Models.Base.Category other);
        ///
        /// Generated by the generator
        ///
        public override bool Equals(object? obj)
        {
            bool result = false;
            if (obj is Models.Base.Category other)
            {
                result = Id == other.Id;
            }
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public override int GetHashCode()
        {
            return this.CalculateHashCode(Name, Description, Books, Id);
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.Base.Category Create()
        {
            BeforeCreate();
            var result = new QTBookShop.Logic.Models.Base.Category();
            AfterCreate(result);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.Base.Category Create(object other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.Base.Category();
            CommonBase.Extensions.ObjectExtensions.CopyFrom(result, other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.Base.Category Create(QTBookShop.Logic.Models.Base.Category other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.Base.Category();
            result.CopyProperties(other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.Base.Category Create(Entities.Base.Category other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.Base.Category();
            result.Source = other;
            AfterCreate(result, other);
            return result;
        }
        static partial void BeforeCreate();
        static partial void AfterCreate(QTBookShop.Logic.Models.Base.Category instance);
        static partial void BeforeCreate(object other);
        static partial void AfterCreate(QTBookShop.Logic.Models.Base.Category instance, object other);
        static partial void BeforeCreate(QTBookShop.Logic.Models.Base.Category other);
        static partial void AfterCreate(QTBookShop.Logic.Models.Base.Category instance, QTBookShop.Logic.Models.Base.Category other);
        static partial void BeforeCreate(Entities.Base.Category other);
        static partial void AfterCreate(QTBookShop.Logic.Models.Base.Category instance, Entities.Base.Category other);
    }
}
