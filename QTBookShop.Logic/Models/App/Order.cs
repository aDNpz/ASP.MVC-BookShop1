//@GeneratedCode
namespace QTBookShop.Logic.Models.App
{
    ///
    /// Generated by the generator
    ///
    public partial class Order
    {
        ///
        /// Generated by the generator
        ///
        static Order()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        ///
        /// Generated by the generator
        ///
        public Order()
        {
            Constructing();
            _source = new Entities.App.Order();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        internal Order(Entities.App.Order source)
        {
            Constructing();
            _source = source;
            Constructed();
        }
        
        new internal Entities.App.Order Source
        {
            get => (Entities.App.Order)(_source!);
            set => _source = value;
        }
        
        public IdType BookId
        {
            get => Source.BookId;
            set => Source.BookId = value;
        }
        
        public System.DateTime Date
        {
            get => Source.Date;
            set => Source.Date = value;
        }
        
        public System.Int32 Quantity
        {
            get => Source.Quantity;
            set => Source.Quantity = value;
        }
        
        public System.Decimal Price
        {
            get => Source.Price;
            set => Source.Price = value;
        }
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(Entities.App.Order other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                BookId = other.BookId;
                Date = other.Date;
                Quantity = other.Quantity;
                Price = other.Price;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(Entities.App.Order other, ref bool handled);
        partial void AfterCopyProperties(Entities.App.Order other);
        ///
        /// Generated by the generator
        ///
        public void CopyProperties(QTBookShop.Logic.Models.App.Order other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                BookId = other.BookId;
                Date = other.Date;
                Quantity = other.Quantity;
                Price = other.Price;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QTBookShop.Logic.Models.App.Order other, ref bool handled);
        partial void AfterCopyProperties(QTBookShop.Logic.Models.App.Order other);
        ///
        /// Generated by the generator
        ///
        public override bool Equals(object? obj)
        {
            bool result = false;
            if (obj is Models.App.Order other)
            {
                result = Id == other.Id;
            }
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public override int GetHashCode()
        {
            return this.CalculateHashCode(BookId, Date, Quantity, Price, Id);
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.App.Order Create()
        {
            BeforeCreate();
            var result = new QTBookShop.Logic.Models.App.Order();
            AfterCreate(result);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.App.Order Create(object other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.App.Order();
            CommonBase.Extensions.ObjectExtensions.CopyFrom(result, other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.App.Order Create(QTBookShop.Logic.Models.App.Order other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.App.Order();
            result.CopyProperties(other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTBookShop.Logic.Models.App.Order Create(Entities.App.Order other)
        {
            BeforeCreate(other);
            var result = new QTBookShop.Logic.Models.App.Order();
            result.Source = other;
            AfterCreate(result, other);
            return result;
        }
        static partial void BeforeCreate();
        static partial void AfterCreate(QTBookShop.Logic.Models.App.Order instance);
        static partial void BeforeCreate(object other);
        static partial void AfterCreate(QTBookShop.Logic.Models.App.Order instance, object other);
        static partial void BeforeCreate(QTBookShop.Logic.Models.App.Order other);
        static partial void AfterCreate(QTBookShop.Logic.Models.App.Order instance, QTBookShop.Logic.Models.App.Order other);
        static partial void BeforeCreate(Entities.App.Order other);
        static partial void AfterCreate(QTBookShop.Logic.Models.App.Order instance, Entities.App.Order other);
    }
}
